import SwiftUI

struct AddJournalEntryView: View {
    let viewModel: JournalListViewModel
    
    @State private var title = ""
    @State private var content = ""
    @State private var selectedMood: Mood?
    @State private var tags: [String] = []
    @State private var tagInput = ""
    @State private var showingMoodPicker = false
    
    @Environment(\.dismiss) private var dismiss
    @FocusState private var isContentFocused: Bool
    
    private var wordCount: Int {
        content.split(separator: " ").count
    }
    
    private var characterCount: Int {
        content.count
    }
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // Title Section
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Title")
                            .font(.headline)
                            .foregroundColor(Color("TextPrimary"))
                        
                        TextField("Entry title (optional)", text: $title)
                            .font(.title3)
                            .foregroundColor(Color("TextPrimary"))
                            .padding()
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color("Surface"))
                            )
                    }
                    
                    // Content Section
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Text("Content")
                                .font(.headline)
                                .foregroundColor(Color("TextPrimary"))
                            
                            Spacer()
                            
                            Text("\\(wordCount) words â€¢ \\(characterCount) characters")
                                .font(.caption)
                                .foregroundColor(Color("TextSecondary"))
                        }\n                        \n                        TextEditor(text: $content)\n                            .font(.body)\n                            .foregroundColor(Color("TextPrimary"))\n                            .frame(minHeight: 200)\n                            .padding()\n                            .background(\n                                RoundedRectangle(cornerRadius: 12)\n                                    .fill(Color("Surface"))\n                            )\n                            .focused($isContentFocused)\n                            .overlay(\n                                RoundedRectangle(cornerRadius: 12)\n                                    .stroke(isContentFocused ? Color("Primary") : Color.clear, lineWidth: 2)\n                            )\n                    }\n                    \n                    // Mood Section\n                    VStack(alignment: .leading, spacing: 12) {\n                        Text("How are you feeling?")\n                            .font(.headline)\n                            .foregroundColor(Color("TextPrimary"))\n                        \n                        LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 12) {\n                            ForEach(Mood.allCases, id: \\.self) { mood in\n                                moodButton(mood)\n                            }\n                        }\n                    }\n                    \n                    // Tags Section\n                    VStack(alignment: .leading, spacing: 12) {\n                        Text("Tags")\n                            .font(.headline)\n                            .foregroundColor(Color("TextPrimary"))\n                        \n                        // Tag input\n                        HStack {\n                            TextField("Add a tag...", text: $tagInput)\n                                .foregroundColor(Color("TextPrimary"))\n                                .onSubmit {\n                                    addTag()\n                                }\n                            \n                            Button("Add") {\n                                addTag()\n                            }\n                            .disabled(tagInput.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)\n                            .foregroundColor(Color("Primary"))\n                        }\n                        .padding()\n                        .background(\n                            RoundedRectangle(cornerRadius: 12)\n                                .fill(Color("Surface"))\n                        )\n                        \n                        // Current tags\n                        if !tags.isEmpty {\n                            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 8) {\n                                ForEach(tags, id: \\.self) { tag in\n                                    tagChip(tag)\n                                }\n                            }\n                        }\n                        \n                        // Suggested tags\n                        let suggestedTags = viewModel.getMostUsedTags(limit: 6).filter { !tags.contains($0) }\n                        if !suggestedTags.isEmpty {\n                            VStack(alignment: .leading, spacing: 8) {\n                                Text("Suggested tags")\n                                    .font(.caption)\n                                    .foregroundColor(Color("TextSecondary"))\n                                \n                                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 8) {\n                                    ForEach(suggestedTags, id: \\.self) { tag in\n                                        suggestedTagButton(tag)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Quick Tips\n                    VStack(alignment: .leading, spacing: 8) {\n                        Text("ðŸ’¡ Tips")\n                            .font(.subheadline)\n                            .fontWeight(.medium)\n                            .foregroundColor(Color("TextSecondary"))\n                        \n                        VStack(alignment: .leading, spacing: 4) {\n                            tip("Write freely â€“ there's no right or wrong way")\n                            tip("Include details about your day, feelings, or thoughts")\n                            tip("Use tags to categorize and find entries later")\n                        }\n                    }\n                    .padding()\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(Color("Primary").opacity(0.1))\n                    )\n                }\n                .padding()\n            }\n            .navigationTitle("New Entry")\n            .navigationBarTitleDisplayMode(.inline)\n            .toolbar {\n                ToolbarItem(placement: .navigationBarLeading) {\n                    Button("Cancel") {\n                        dismiss()\n                    }\n                    .foregroundColor(Color("Primary"))\n                }\n                \n                ToolbarItem(placement: .navigationBarTrailing) {\n                    Button("Save") {\n                        saveEntry()\n                    }\n                    .disabled(content.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)\n                    .foregroundColor(Color("Primary"))\n                    .fontWeight(.semibold)\n                }\n            }\n            .background(Color("Background"))\n        }\n        .preferredColorScheme(.dark)\n        .onAppear {\n            isContentFocused = true\n            generateTitleFromContent()\n            AnalyticsService.shared.trackScreen("Add Journal Entry")\n        }\n        .onChange(of: content) { _, _ in\n            if title.isEmpty {\n                generateTitleFromContent()\n            }\n        }\n    }\n    \n    // MARK: - Mood Button\n    private func moodButton(_ mood: Mood) -> some View {\n        Button(action: {\n            selectedMood = selectedMood == mood ? nil : mood\n        }) {\n            VStack(spacing: 6) {\n                Image(systemName: mood.icon)\n                    .font(.title2)\n                    .foregroundColor(selectedMood == mood ? .white : mood.color)\n                \n                Text(mood.displayName)\n                    .font(.caption)\n                    .foregroundColor(selectedMood == mood ? .white : Color("TextSecondary"))\n            }\n            .frame(maxWidth: .infinity)\n            .padding(.vertical, 12)\n            .background(\n                RoundedRectangle(cornerRadius: 12)\n                    .fill(selectedMood == mood ? mood.color : Color("Surface"))\n            )\n            .overlay(\n                RoundedRectangle(cornerRadius: 12)\n                    .stroke(mood.color.opacity(0.3), lineWidth: selectedMood == mood ? 0 : 1)\n            )\n            .scaleEffect(selectedMood == mood ? 1.05 : 1.0)\n        }\n        .buttonStyle(PlainButtonStyle())\n        .animation(.easeInOut(duration: 0.2), value: selectedMood)\n    }\n    \n    // MARK: - Tag Chip\n    private func tagChip(_ tag: String) -> some View {\n        HStack(spacing: 4) {\n            Text("#\\(tag)")\n                .font(.caption)\n                .foregroundColor(Color("Primary"))\n            \n            Button(action: {\n                removeTag(tag)\n            }) {\n                Image(systemName: "xmark.circle.fill")\n                    .font(.caption2)\n                    .foregroundColor(Color("TextSecondary"))\n            }\n        }\n        .padding(.horizontal, 8)\n        .padding(.vertical, 4)\n        .background(\n            Capsule()\n                .fill(Color("Primary").opacity(0.2))\n        )\n    }\n    \n    // MARK: - Suggested Tag Button\n    private func suggestedTagButton(_ tag: String) -> some View {\n        Button(action: {\n            addSuggestedTag(tag)\n        }) {\n            Text("#\\(tag)")\n                .font(.caption)\n                .foregroundColor(Color("TextSecondary"))\n                .padding(.horizontal, 8)\n                .padding(.vertical, 4)\n                .background(\n                    Capsule()\n                        .stroke(Color("TextSecondary").opacity(0.3), lineWidth: 1)\n                )\n        }\n        .buttonStyle(PlainButtonStyle())\n    }\n    \n    // MARK: - Tip View\n    private func tip(_ text: String) -> some View {\n        HStack(alignment: .top, spacing: 8) {\n            Text("â€¢")\n                .font(.caption)\n                .foregroundColor(Color("Primary"))\n            \n            Text(text)\n                .font(.caption)\n                .foregroundColor(Color("TextSecondary"))\n                .multilineTextAlignment(.leading)\n            \n            Spacer()\n        }\n    }\n    \n    // MARK: - Actions\n    private func addTag() {\n        let trimmedTag = tagInput.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()\n        \n        guard !trimmedTag.isEmpty && !tags.contains(trimmedTag) else {\n            return\n        }\n        \n        tags.append(trimmedTag)\n        tagInput = ""\n    }\n    \n    private func removeTag(_ tag: String) {\n        tags.removeAll { $0 == tag }\n    }\n    \n    private func addSuggestedTag(_ tag: String) {\n        if !tags.contains(tag) {\n            tags.append(tag)\n        }\n    }\n    \n    private func generateTitleFromContent() {\n        if title.isEmpty && !content.isEmpty {\n            let words = content.prefix(50).split(separator: " ")\n            let generatedTitle = words.prefix(8).joined(separator: " ")\n            if !generatedTitle.isEmpty {\n                title = String(generatedTitle)\n            }\n        }\n    }\n    \n    private func saveEntry() {\n        let trimmedContent = content.trimmingCharacters(in: .whitespacesAndNewlines)\n        let finalTitle = title.isEmpty ? "Journal Entry" : title\n        \n        guard !trimmedContent.isEmpty else { return }\n        \n        viewModel.addEntry(\n            title: finalTitle,\n            content: trimmedContent,\n            mood: selectedMood,\n            tags: tags\n        )\n        \n        dismiss()\n    }\n}\n\n#Preview {\n    AddJournalEntryView(viewModel: JournalListViewModel())\n}